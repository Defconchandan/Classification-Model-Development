# Separating the structured and unstructured(text) variables
train_inputs_data = train[[]]
test_inputs_data = test[[]]

train_inputs_text_data = train[['']]
test_inputs_text_data = test[['']]
train_target = train['']
test_target = test['']
svd = TruncatedSVD(n_components=100, n_iter=10)
# Transforming the train data
train_x_lsa = svd.fit_transform(train_x_tr)
train_x_lsa.shape
train_x_lsa
# Transforming the test data
test_x_lsa = svd.transform(test_x_tr)
test_x_lsa.shape
test_x_lsa
print("Before transforming structured data: ",
      "\ntrain_inputs_data: ", train_inputs_data.shape, 
      "\ntest_inputs_data: ", test_inputs_data.shape,
      "\n\nAfter transforming structured data: ",
      "\ntrain_x_structured: ", train_x_structured.shape, 
      "\ntest_x_structured: ", test_x_structured.shape,
      "\n\nBefore transforming text data: ",
      "\ntrain_inputs_text: ", train_inputs_text_data.shape,
      "\ntest_inputs_text.shape: ", test_inputs_text_data.shape,
      "\n\nAfter tdif vectorization of text data: ",
      "\ntrain_x_tr: ", train_x_tr.shape,
      "\ntest_x_tr: ", test_x_tr.shape,
      "\n\nAfter svd of text data: ",
      "\ntrain_x_lsa: ", train_x_lsa.shape,
      "\ntest_x_lsa: ", test_x_lsa.shape)
      
train_x = np.concatenate((train_x_structured, train_x_lsa), axis=1)
test_x = np.concatenate((test_x_structured, test_x_lsa), axis=1)
print("Train inputs: ", train_x.shape,
      "\nTest inputs: ", test_x.shape)
      
from sklearn.metrics import mean_squared_error
# Average value of the target
mean_value = np.mean(train_target)
mean_value
# Predict all values as the mean
baseline_pred = np.repeat(mean_value, len(test_target))
baseline_pred
baseline_mse = mean_squared_error(test_target, baseline_pred)
baseline_rmse = np.sqrt(baseline_mse)
print(f'Baseline RMSE: {baseline_rmse}')
train_target
test_target
